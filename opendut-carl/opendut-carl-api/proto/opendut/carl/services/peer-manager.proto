syntax = "proto3";

package opendut.carl.services.peer_manager;

import "opendut/types/topology/device.proto";
import "opendut/types/peer/peer.proto";

service PeerManager {
  rpc StorePeerDescriptor(StorePeerDescriptorRequest) returns (StorePeerDescriptorResponse) {}
  rpc DeletePeerDescriptor(DeletePeerDescriptorRequest) returns (DeletePeerDescriptorResponse) {}
  rpc GetPeerDescriptor(GetPeerDescriptorRequest) returns (GetPeerDescriptorResponse) {}
  rpc ListPeerDescriptors(ListPeerDescriptorsRequest) returns (ListPeerDescriptorsResponse) {}
  rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse) {}
  rpc GeneratePeerSetup(GeneratePeerSetupRequest) returns (GeneratePeerSetupResponse) {}
}

//
// StorePeerDescriptorRequest
//
message StorePeerDescriptorRequest {
  opendut.types.peer.PeerDescriptor peer = 1;
}

message StorePeerDescriptorResponse {
  oneof reply {
    StorePeerDescriptorSuccess success = 1;
    StorePeerDescriptorFailure failure = 2;
  }
}

message StorePeerDescriptorSuccess {
  opendut.types.peer.PeerId peer_id = 1;
}

message StorePeerDescriptorFailure {
  oneof error {
    StorePeerDescriptorFailureIllegalPeerState illegal_peer_state = 1;
    StorePeerDescriptorFailureIllegalDevices illegal_devices = 2;
    StorePeerDescriptorFailureInternal internal = 3;
  }
}

message StorePeerDescriptorFailureIllegalPeerState {
  opendut.types.peer.PeerId peer_id = 1;
  opendut.types.peer.PeerName peer_name = 2;
  opendut.types.peer.PeerState actual_state = 3;
  repeated opendut.types.peer.PeerState required_states = 4;
}

message StorePeerDescriptorFailureIllegalDevices {
    opendut.types.peer.PeerId peer_id = 1;
    opendut.types.peer.PeerName peer_name = 2;
    IllegalDevicesError error = 3;
}

message StorePeerDescriptorFailureInternal {
    opendut.types.peer.PeerId peer_id = 1;
    opendut.types.peer.PeerName peer_name = 2;
    string cause = 3;
}

//
// DeletePeerDescriptorRequest
//
message DeletePeerDescriptorRequest {
  opendut.types.peer.PeerId peer_id = 1;
}

message DeletePeerDescriptorResponse {
  oneof reply {
    DeletePeerDescriptorSuccess success = 1;
    DeletePeerDescriptorFailure failure = 2;
  }
}

message DeletePeerDescriptorSuccess {
  opendut.types.peer.PeerId peer_id = 1;
}

message DeletePeerDescriptorFailure {
  oneof error {
    DeletePeerDescriptorFailurePeerNotFound peer_not_found = 1;
    DeletePeerDescriptorFailureIllegalPeerState illegal_peer_state = 2;
    DeletePeerDescriptorFailureInternal internal = 4;
  }
}

message DeletePeerDescriptorFailurePeerNotFound {
  opendut.types.peer.PeerId peer_id = 1;
}

message DeletePeerDescriptorFailureIllegalPeerState {
  opendut.types.peer.PeerId peer_id = 1;
  opendut.types.peer.PeerName peer_name = 2;
  opendut.types.peer.PeerState actual_state = 3;
  repeated opendut.types.peer.PeerState required_states = 4;
}

message DeletePeerDescriptorFailureInternal {
  opendut.types.peer.PeerId peer_id = 1;
  opendut.types.peer.PeerName peer_name = 2;
  string cause = 3;
}

//
// GetPeerDescriptorRequest
//
message GetPeerDescriptorRequest {
  opendut.types.peer.PeerId peer_id = 1;
}

message GetPeerDescriptorResponse {
  oneof reply {
    GetPeerDescriptorSuccess success = 1;
    GetPeerDescriptorFailure failure = 2;
  }
}

message GetPeerDescriptorSuccess {
  opendut.types.peer.PeerDescriptor descriptor = 1;
}

message GetPeerDescriptorFailure {
  oneof error {
    GetPeerDescriptorFailurePeerNotFound peer_not_found = 1;
    GetPeerDescriptorFailureInternal internal = 2;
  }
}

message GetPeerDescriptorFailurePeerNotFound {
  opendut.types.peer.PeerId peer_id = 1;
}

message GetPeerDescriptorFailureInternal {
  opendut.types.peer.PeerId peer_id = 1;
  string cause = 2;
}

//
// ListPeerRequest
//
message ListPeerDescriptorsRequest {}

message ListPeerDescriptorsResponse {
  oneof reply {
    ListPeerDescriptorsSuccess success = 1;
    ListPeerDescriptorsFailure failure = 2;
  }
}

message ListPeerDescriptorsSuccess {
  repeated opendut.types.peer.PeerDescriptor peers = 1;
}

message ListPeerDescriptorsFailure {
  oneof error {
      ListPeerDescriptorsFailureInternal internal = 1;
  }
}

message ListPeerDescriptorsFailureInternal {
  string cause = 1;
}

//
// GeneratePeerSetupRequest
//
message GeneratePeerSetupRequest {
  opendut.types.peer.PeerId peer = 1;
}

message GeneratePeerSetupResponse {
  oneof reply {
    GeneratePeerSetupSuccess success = 1;
    GeneratePeerSetupFailure failure = 2;
  }
}

message GeneratePeerSetupSuccess {
  opendut.types.peer.PeerId peer = 1;
  opendut.types.peer.PeerSetup setup = 2;
}

message GeneratePeerSetupFailure {
}

//
// ListDevicesRequest
//
message ListDevicesRequest {}

message ListDevicesResponse {
  repeated opendut.types.topology.DeviceDescriptor devices = 1;
}

message IllegalDevicesError {
  oneof error {
    IllegalDevicesErrorDeviceAlreadyExists device_already_exists = 1;
  }
}

message IllegalDevicesErrorDeviceAlreadyExists {
  opendut.types.topology.DeviceId device_id = 1;
}
