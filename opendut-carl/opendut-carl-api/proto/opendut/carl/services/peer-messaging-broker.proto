syntax = "proto3";

package opendut.carl.services.peer_messaging_broker;

import "opendut/types/cluster/cluster.proto";
import "opendut/types/peer/peer.proto";
import "opendut/types/peer/configuration.proto";
import "opendut/types/vpn/vpn.proto";

service PeerMessagingBroker {
  rpc ListPeers(ListPeersRequest) returns (ListPeersResponse);
  rpc Open(stream Upstream) returns (stream Downstream);
}

message ListPeersRequest {}

message ListPeersResponse {
  repeated opendut.types.peer.PeerId peers = 1;
}

message Upstream {
  TracingContext context = 1;
  oneof message {
    Ping ping = 2;
  }
}

message Downstream {
  TracingContext context = 1;
  oneof message {
    Pong pong = 2;
    ApplyPeerConfiguration apply_peer_configuration = 3;
  }
}

message Ping {}
message Pong {}


message ApplyPeerConfiguration {
  opendut.types.peer.configuration.PeerConfiguration configuration = 1;
}

message TracingContext {
  map<string, string> values = 1;
}
